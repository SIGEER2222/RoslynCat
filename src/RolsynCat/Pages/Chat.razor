@page "/chat"
@using Markdig
@using RoslynCat.Controllers;

<div class="chat-div">
    <div class="chat-container">
        <div class="chat-messages">
            @foreach (var message in Messages) {
                <div class="chat-message @(message.IsSystemMessage ? "system-message" : "user-message")">
                    <div class="message-bubble">
                        @if (message.IsSystemMessage) {

                            <div>@((MarkupString)message.Text)</div>
                        }
                        else {
                            <p>@message.Text</p>
                        }
                    </div>
                </div>
            }
        </div>
        <div class="chat-input">
            <textarea @bind="@CurrentMessage" placeholder="@placeholder" disabled="@isSending"></textarea>
            <button class="send-button" @onclick="SendMessage" disabled="@isSending">发送</button>
        </div>
    </div>
</div>

@code {

    private bool isSending = false;
    private string CurrentMessage = string.Empty;
    private string placeholder = "请输入问题";
    private List<Message> Messages = new List<Message>();
    private Dialogue lastMessage = new Dialogue();
    private class Message
    {
        public string Text { get; set; }
        public bool IsSystemMessage { get; set; }
    }

    private async Task SendMessage() {
        if (!string.IsNullOrWhiteSpace(CurrentMessage)) {
            string ask = CurrentMessage;
            CurrentMessage = "";
            await WaitMessage(ask);
        }
    }

    private async Task WaitMessage(string ask) {
        isSending = true;
        placeholder = "思考中，请等待……";
        string result = await new ChatGPT().Reply(ask,lastMessage);
        Console.WriteLine(result);
        result = UpdateHtmlText(result);
        Messages.Add(new Message { Text = ask,IsSystemMessage = false });
        Messages.Add(new Message { Text = result,IsSystemMessage = true });
        lastMessage.ask = CurrentMessage;
        lastMessage.message = result;
        isSending = false;
        placeholder = "请输入问题";
    }

    private string UpdateHtmlText(string text) {
        var pipeline = new MarkdownPipelineBuilder().UseAdvancedExtensions().Build();
        return Markdown.ToHtml(text,pipeline);
    }
}